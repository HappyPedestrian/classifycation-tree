var P=Object.defineProperty;var v=Object.getOwnPropertySymbols;var E=Object.prototype.hasOwnProperty,S=Object.prototype.propertyIsEnumerable;var y=(e,r,h)=>r in e?P(e,r,{enumerable:!0,configurable:!0,writable:!0,value:h}):e[r]=h,u=(e,r)=>{for(var h in r||(r={}))E.call(r,h)&&y(e,h,r[h]);if(v)for(var h of v(r))S.call(r,h)&&y(e,h,r[h]);return e};(function(e,r){typeof exports=="object"&&typeof module!="undefined"?module.exports=r(require("vue")):typeof define=="function"&&define.amd?define(["vue"],r):(e=typeof globalThis!="undefined"?globalThis:e||self)["classify-tree"]=r(e.Vue)})(this,function(e){"use strict";const r=e.defineComponent({inheritAttrs:!1,props:{template:{type:Function},data:{}},setup(){},components:{},data:()=>({}),computed:{},watch:{},mounted(){this.$emit("mounted")},methods:{},render:t=>e.h("div",[t.template(t.data)])});var h=(t,o)=>{const a=t.__vccOpts||t;for(const[d,s]of o)a[d]=s;return a};const b=e.defineComponent({name:"ClassifyTreeNode",props:{nodeData:{default:()=>({label:"",key:"",slotScope:"default",expanded:!1})},parent:{default:()=>null},mode:{default:"vertical"}},setup(t,o){const a=e.toRefs(t.nodeData),d=e.inject("slots"),s=e.unref(e.inject("connectLineOption")),l=e.inject("treeNodeProp"),n={label:(l==null?void 0:l.label)||"label",children:(l==null?void 0:l.children)||"children",key:(l==null?void 0:l.key)||"children"};let p={};return p=a.connectLineOption?u(u({},s),e.unref(a.connectLineOption)):s,e.provide("slots",d||o.slots),e.provide("connectLineOption",p),{slots:d,nodeConnectLineOption:e.ref(p),treeNodeProp:e.ref(n)}},components:{TemplateContainer:r},data:()=>({treeNodeElRect:{},connectLinePaths:[],arrowPositions:[],svgStyle:{height:"0",width:"0"},mutationObserver:null,expanded:!1}),computed:{nodeStyle(){return typeof this.nodeData.style=="object"?u({},this.nodeData.style):null},nodeChildrenConnectLineOption(){const t=this.nodeConnectLineOption;return this.nodeData[this.treeNodeProp.children]?this.nodeData[this.treeNodeProp.children].map(o=>{let a=o.connectLineOption||{};return u(u({},t),a)}):[]},showChildren(){return this.nodeData[this.treeNodeProp.children]&&this.nodeData[this.treeNodeProp.children].length>0&&this.expanded!==!1}},watch:{showChildren(t){var o;!this.mutationObserver&&t?(this.$nextTick(()=>{this.bindMutationObserver()}),this.mutationObserverCallback(),setTimeout(()=>{this.mutationObserverCallback()},500)):((o=this.mutationObserver)==null||o.disconnect(),this.mutationObserverCallback(),setTimeout(()=>{this.mutationObserverCallback()},500))},mode(){this.mutationObserverCallback(),setTimeout(()=>{this.mutationObserverCallback()},500)},"nodeData.expanded"(t){this.expanded=t!==!1}},created(){this.expanded=this.nodeData.expanded!==!1},mounted(){this.bindMutationObserver(),this.mutationObserverCallback()},beforeUnmount(){var t;(t=this==null?void 0:this.mutationObserver)!=null&&t.disconnect&&this.mutationObserver.disconnect(),this.$nextTick(()=>{this.mutationObserverCallback()})},methods:{bindMutationObserver(){if(this.mutationObserver)return;const t=this.$refs.childNodesBoxRef;t&&(this.mutationObserver=function(o,a,d){const s=new MutationObserver(a);return s.observe(o,u({attributes:!0,childList:!0,subtree:!0,characterData:!0},d)),s}(t,()=>{this.$nextTick(()=>{setTimeout(()=>{this.mutationObserverCallback()},500)})}))},mutationObserverCallback(){var d,s,l;this.connectLinePaths=[],this.arrowPositions=[];const t=this.$refs.treeNodeRef;if(!t)return;this.treeNodeElRect=t.getBoundingClientRect();const o=this.$refs.childNodesBoxRef;let a=(d=this.nodeConnectLineOption)!=null&&d.lineHeight?this.nodeConnectLineOption.lineHeight:"20px";if(o){const n=o.getBoundingClientRect();this.mode==="vertical"?Object.assign(this.svgStyle,{height:a,width:n.width}):this.mode==="horizon"&&Object.assign(this.svgStyle,{height:n.height,width:a});const p=o.children,i=Number.parseInt(a);for(let c of p){const f=c.getBoundingClientRect();if(this.mode==="vertical"){const C=n.left+n.width/2,m=f.left+f.width/2,k=C-m;this.connectLinePaths.push(`M${n.width/2} 0 Q ${n.width/2} ${i/2} ${n.width/2-k/2} ${i/2} Q ${m-n.left} ${i/2} ${m-n.left} ${i-4}`),(s=this.nodeConnectLineOption)!=null&&s.showArrow&&this.arrowPositions.push(`${m-n.left} ${i}`)}else if(this.mode==="horizon"){const C=n.top+n.height/2,m=f.top+f.height/2,k=C-m;this.connectLinePaths.push(`M 0 ${n.height/2} Q ${i/2} ${n.height/2} ${i/2} ${n.height/2-k/2} Q ${i/2} ${m-n.top} ${i-4} ${m-n.top}`),(l=this.nodeConnectLineOption)!=null&&l.showArrow&&this.arrowPositions.push(`${i} ${m-n.top}`)}}}this.$nextTick(()=>{this.$emit("updateConnectLine")})},getChildStyle(t){const o=this.nodeData[this.treeNodeProp.children]?this.nodeData[this.treeNodeProp.children].length:0;return this.mode==="vertical"?{marginRight:t<o-1?"15px":null}:{marginBottom:t<o-1?"15px":null}},onExpandClick(){this.nodeData.expanded===!1?this.expanded=this.nodeData.expanded=!0:this.expanded=this.nodeData.expanded=!1},updateConnectLine(){this.$nextTick(()=>{this.mutationObserverCallback()})}}}),g={class:"classify-tree-node-default"},O={class:"classify-tree-node-expand-default"},N=(t=>(e.pushScopeId("data-v-10c8f218"),t=t(),e.popScopeId(),t))(()=>e.createElementVNode("span",{class:"minus"},null,-1)),w={key:0,class:"minus add"},x=["height","width"],L=["d","stroke","stroke-width"],B=["d","stroke","fill","transform"],$={key:0,class:"classify-tree-children",ref:"childNodesBoxRef"};var D=h(b,[["render",function(t,o,a,d,s,l){const n=e.resolveComponent("TemplateContainer"),p=e.resolveComponent("ClassifyTreeNode",!0);return e.openBlock(),e.createElementBlock("div",{class:e.normalizeClass(["classify-tree-node-wraper",t.mode==="vertical"?"classify-tree-node-wraper-vertical":t.mode==="horizon"?"classify-tree-node-wraper-horizon":null])},[e.createElementVNode("div",{class:e.normalizeClass(["classify-tree-node-content",t.mode==="vertical"?"classify-tree-node-content-vertical":t.mode==="horizon"?"classify-tree-node-content-horizon":null]),ref:"treeNodeRef"},[e.createElementVNode("div",{class:e.normalizeClass(["classify-tree-node",t.nodeData.class]),style:e.normalizeStyle(t.nodeStyle),ref:"treeNodeContentRef"},[t.slots&&t.slots[t.nodeData.slotScope||"default"]?(e.openBlock(),e.createBlock(n,{key:0,template:t.slots[t.nodeData.slotScope||"default"],data:{node:t.nodeData,parent:t.parent}},null,8,["template","data"])):e.renderSlot(t.$slots,t.nodeData.slotScope||"default",{key:1,data:{node:t.nodeData,parent:t.parent}},()=>[e.createElementVNode("div",g,e.toDisplayString(t.nodeData[t.treeNodeProp.label]),1)],!0)],6),e.createElementVNode("div",{class:e.normalizeClass(["classify-tree-node-expand",t.mode==="vertical"?"classify-tree-node-expand-vertical":t.mode==="horizon"?"classify-tree-node-expand-horizon":null]),onClick:o[0]||(o[0]=(...i)=>t.onExpandClick&&t.onExpandClick(...i))},[t.slots&&t.slots.expand&&t.nodeData[t.treeNodeProp.children]&&t.nodeData[t.treeNodeProp.children].length>0?(e.openBlock(),e.createBlock(n,{key:0,template:t.slots.expand,data:t.nodeData.expanded},null,8,["template","data"])):t.nodeData[t.treeNodeProp.children]&&t.nodeData[t.treeNodeProp.children].length>0?e.renderSlot(t.$slots,"default",{key:1,data:t.expanded},()=>[e.createElementVNode("div",O,[N,t.expanded===!1?(e.openBlock(),e.createElementBlock("span",w)):e.createCommentVNode("",!0)])],!0):e.createCommentVNode("",!0)],2),t.showChildren?(e.openBlock(),e.createElementBlock("div",{key:0,class:e.normalizeClass(["diliver",t.mode==="vertical"?"diliver-vertical":t.mode==="horizon"?"diliver-horizon":null])},[(e.openBlock(),e.createElementBlock("svg",{height:t.svgStyle.height,width:t.svgStyle.width,version:"1.1",xmlns:"http://www.w3.org/2000/svg"},[(e.openBlock(!0),e.createElementBlock(e.Fragment,null,e.renderList(t.connectLinePaths,(i,c)=>(e.openBlock(),e.createElementBlock("path",{d:i,key:c,stroke:t.nodeChildrenConnectLineOption[c]&&t.nodeChildrenConnectLineOption[c].lineColor||"black",fill:"transparent","stroke-width":t.nodeChildrenConnectLineOption[c]&&t.nodeChildrenConnectLineOption[c].lineWidth||2,"stroke-linecap":"round"},null,8,L))),128)),(e.openBlock(!0),e.createElementBlock(e.Fragment,null,e.renderList(t.arrowPositions,(i,c)=>(e.openBlock(),e.createElementBlock("path",{key:c,d:`M ${i} m 0 -4 l 3 -3 l -3 7 l -3 -7 l 3 3`,stroke:t.nodeChildrenConnectLineOption[c]&&t.nodeChildrenConnectLineOption[c].lineColor||"black",fill:t.nodeChildrenConnectLineOption[c]&&t.nodeChildrenConnectLineOption[c].lineColor||"black","stroke-width":"0.2",transform:t.mode==="horizon"?`rotate(-90, ${i})`:void 0,"stroke-linejoin":"miter"},null,8,B))),128))],8,x))],2)):e.createCommentVNode("",!0),e.createVNode(e.Transition,{name:"child-contain-box",onAfterLeave:t.updateConnectLine,onAfterEnter:t.updateConnectLine},{default:e.withCtx(()=>[t.showChildren?(e.openBlock(),e.createElementBlock("div",$,[e.createVNode(e.TransitionGroup,{name:"children-box"},{default:e.withCtx(()=>[(e.openBlock(!0),e.createElementBlock(e.Fragment,null,e.renderList(t.nodeData[t.treeNodeProp.children],(i,c)=>(e.openBlock(),e.createBlock(p,{key:i[t.treeNodeProp.key],"node-data":i,parent:t.nodeData,style:e.normalizeStyle(t.getChildStyle(c)),mode:t.mode,onUpdateConnectLine:t.mutationObserverCallback},null,8,["node-data","parent","style","mode","onUpdateConnectLine"]))),128))]),_:1})],512)):e.createCommentVNode("",!0)]),_:1},8,["onAfterLeave","onAfterEnter"])],2)],2)}],["__scopeId","data-v-10c8f218"]]);return h(e.defineComponent({name:"ClassifyTree",props:{nodeList:{default:()=>[]},mode:{default:"vertical"},connectLineOption:{default:()=>({})},treeNodeProps:{default:()=>({label:"label",children:"children",key:"key"})}},setup(t,o){var l,n,p;const{connectLineOption:a,treeNodeProps:d}=e.toRefs(t),s={label:((l=d.value)==null?void 0:l.label)||"label",children:((n=d.value)==null?void 0:n.children)||"children",key:((p=d.value)==null?void 0:p.key)||"key"};return e.provide("slots",o.slots),e.provide("connectLineOption",a),e.provide("treeNodeProp",s),{treeNodeProp:e.ref(s)}},components:{ClassifyTreeNode:D,TemplateContainer:r},data:()=>({}),computed:{},watch:{},mounted(){},methods:{getChildStyle(t){return this.mode==="vertical"?{marginRight:t<this.nodeList.length-1?"15px":null}:{marginBottom:t<this.nodeList.length-1?"15px":null}}}}),[["render",function(t,o,a,d,s,l){const n=e.resolveComponent("ClassifyTreeNode");return e.openBlock(),e.createElementBlock("div",{class:e.normalizeClass(["classify-tree-wraper",t.mode==="vertical"?"classify-tree-wraper-vertical":t.mode==="horizon"?"classify-tree-wraper-horizon":null])},[e.createVNode(e.TransitionGroup,{name:"tree"},{default:e.withCtx(()=>[(e.openBlock(!0),e.createElementBlock(e.Fragment,null,e.renderList(t.nodeList,(p,i)=>(e.openBlock(),e.createBlock(n,{"node-data":p,style:e.normalizeStyle(t.getChildStyle(i)),mode:t.mode,key:p[t.treeNodeProp.key]},null,8,["node-data","style","mode"]))),128))]),_:1})],2)}],["__scopeId","data-v-426dbd21"]])});
